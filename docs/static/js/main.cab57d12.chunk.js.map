{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/Loading.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","Loading","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCWZG,EAlBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAKKI,MAAMF,GALX,cAKRG,EALQ,gBAMSA,EAAKC,OANd,uBAMNC,EANM,EAMNA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXxB,kBAePM,GAfO,4CAAH,sDCcEO,G,KATK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,yBAAKc,UAAU,0CACb,yBAAKA,UAAU,YAAYC,IAAKf,EAAKgB,IAAKN,IAC1C,2BAAIA,MCCKO,EARC,WACd,OACE,yBAAKH,UAAU,eACb,yBAAKA,UAAU,4BCmBNI,EAnBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDZ2BK,CAAa3B,GAAjCa,EADkB,EACxBN,KAAcc,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIL,UAAU,+CACX,IACAhB,EAAU,KAEZqB,GAAW,kBAAC,EAAD,MACZ,yBAAKL,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEiBzBmB,EA5BM,WAAO,IAAD,EACW3C,mBAAS,CAAC,UADrB,mBAClB4C,EADkB,KACN7C,EADM,KAWzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAGE,4BACG6C,EAAWrB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,UClB9C+B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.cab57d12.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cat) => [inputValue, ...cat])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=jW1eQoCJVMbPya5SxMfy1rkAOpHDJd1S`\n\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  })\n\n  return gifs\n}\n\nexport default getGifs\n","import React from 'react'\n\n// Styled\nimport '../index.css'\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img className=\"card__img\" src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <div className=\"spinner-box\">\n      <div className=\"three-quarter-spinner\"></div>\n    </div>\n  )\n}\n\nexport default Loading\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\nimport Loading from './Loading'\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__lightSpeedInLeft\">\n        {' '}\n        {category}{' '}\n      </h3>\n      {loading && <Loading />}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from 'react'\nimport getGifs from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category).then((imgs) =>\n      setstate({\n        data: imgs,\n        loading: false,\n      })\n    )\n  }, [category])\n\n  return state\n}\n","import React, { useState } from 'react'\n\n// Components\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Panda'])\n\n  // const handleAdd = () => {\n  //    ? Con spread operator\n  //    setCategories(['Malamute', ...categories])\n\n  //    ? Con un callback y spread operator\n  //   setCategories((cats) => ['Malamute', ...categories])\n  // }\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      {\n        <ol>\n          {categories.map((category) => (\n            <GifGrid key={category} category={category} />\n          ))}\n        </ol>\n      }\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n// Components\nimport GifExpertApp from './GifExpertApp'\n\n// Styles\nimport './index.css'\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'))\n"],"sourceRoot":""}